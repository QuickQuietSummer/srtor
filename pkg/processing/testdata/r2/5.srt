1
00:00:00,768 --> 00:00:04,352
Hello in the previous video we talked about amdahl's law

2
00:00:04,864 --> 00:00:09,216
The one where it's limiting the speed up right because of the sequential

3
00:00:09,472 --> 00:00:10,240
Lights off

4
00:00:10,752 --> 00:00:12,544
Software out of our program

5
00:00:13,568 --> 00:00:17,408
In this video we will talk about another law concerning parallel program

6
00:00:18,176 --> 00:00:19,712
The lowest called Gustav's law

7
00:00:20,224 --> 00:00:20,992
And it's kind of

8
00:00:21,248 --> 00:00:22,272
Twists around

9
00:00:22,528 --> 00:00:24,576
The problem of limited speed

10
00:00:25,088 --> 00:00:28,416
So we can get a linear speed up it basically States

11
00:00:28,672 --> 00:00:30,720
That is true that we are restrict

12
00:00:30,976 --> 00:00:33,536
Addicted by the sequential part of our software

13
00:00:33,792 --> 00:00:34,816
Write the speed

14
00:00:35,072 --> 00:00:35,840
What's restricted by that

15
00:00:36,096 --> 00:00:37,120
However if we

16
00:00:37,376 --> 00:00:38,656
Take into account

17
00:00:38,912 --> 00:00:39,936
That we can also increase

18
00:00:40,448 --> 00:00:41,472
Our problem

19
00:00:41,984 --> 00:00:43,776
We can have a linear speed

20
00:00:44,288 --> 00:00:45,568
With regards

21
00:00:45,824 --> 00:00:47,104
Listen to the processing

22
00:00:48,896 --> 00:00:49,664
So for example

23
00:00:49,920 --> 00:00:52,224
If we go back to our example of building

24
00:00:52,736 --> 00:00:54,016
At war with builders

25
00:00:54,784 --> 00:00:56,832
What we can do is to get those people to do

26
00:00:57,088 --> 00:00:58,880
Different jobs in a different

27
00:00:59,136 --> 00:01:00,160
Parts right for example

28
00:01:00,416 --> 00:01:02,720
By asking them to build a

29
00:01:02,976 --> 00:01:06,048
In a different place right where another wheelbarrow is available

30
00:01:07,072 --> 00:01:08,352
In this way we have increased

31
00:01:08,608 --> 00:01:09,120
What's the problem

32
00:01:10,656 --> 00:01:11,936
How to fix the size wall

33
00:01:12,192 --> 00:01:13,216
The wall is now

34
00:01:13,472 --> 00:01:14,240
Bigger

35
00:01:14,496 --> 00:01:15,776
Lights in a different location as well

36
00:01:16,800 --> 00:01:19,104
But the idea here is that we have in

37
00:01:19,616 --> 00:01:20,640
The problem

38
00:01:20,896 --> 00:01:22,176
And now in the same time

39
00:01:22,432 --> 00:01:25,760
End the time of 2 days we have finished three walls instead of

40
00:01:26,528 --> 00:01:30,624
Of course the problem is that you might not want to have three walls right but if you have

41
00:01:31,136 --> 00:01:31,904
Those extra

42
00:01:32,416 --> 00:01:34,464
Just doing nothing might as well get them to do something

43
00:01:36,768 --> 00:01:38,560
Get them to build a garden shed

44
00:01:39,072 --> 00:01:39,584
Play something else

45
00:01:40,352 --> 00:01:42,912
But the whole idea here is that you increase the problem

46
00:01:43,424 --> 00:01:46,496
Much bigger so we can scale it

47
00:01:46,752 --> 00:01:47,264
Is better

48
00:01:47,776 --> 00:01:51,616
This kind of relation between the problem size and the number of

49
00:01:51,872 --> 00:01:52,640
Off processors

50
00:01:52,896 --> 00:01:54,944
Putin is known as the gustafson's

51
00:01:55,712 --> 00:01:57,248
And it's kind of a more positive take

52
00:01:57,504 --> 00:01:59,040
On andalus

53
00:01:59,296 --> 00:02:04,672
And it's also applies to computer programs imagine for example you were writing a computer game and you

54
00:02:04,928 --> 00:02:06,208
I have a fast video card

55
00:02:06,464 --> 00:02:08,256
That has maybe I don't know

56
00:02:08,512 --> 00:02:09,280
Processors on

57
00:02:09,792 --> 00:02:10,816
And you realize that

58
00:02:11,072 --> 00:02:12,608
No matter how many processors

59
00:02:12,864 --> 00:02:13,632
You are putting

60
00:02:13,888 --> 00:02:15,936
On your rendering part you can never get

61
00:02:16,192 --> 00:02:16,960
The frame

62
00:02:17,216 --> 00:02:19,008
What is higher than 60 Fram

63
00:02:20,288 --> 00:02:24,128
So what do you do is use only half of those processors the frame rate

64
00:02:24,384 --> 00:02:25,152
Is unaffected

65
00:02:25,408 --> 00:02:27,200
However you use the other

66
00:02:27,456 --> 00:02:29,248
To do other things for example Maybe

67
00:02:29,504 --> 00:02:31,040
Increase the resolution

68
00:02:31,296 --> 00:02:33,856
Or increase number of polygons or

69
00:02:34,112 --> 00:02:34,880
Improve your

70
00:02:35,648 --> 00:02:41,536
And what is he over here is that as long as you increase the problem size right as long as you have an infinite

71
00:02:41,792 --> 00:02:42,560
Problem

72
00:02:43,072 --> 00:02:45,120
Can you increase the number of processors

73
00:02:45,888 --> 00:02:46,912
It doesn't really matter

74
00:02:47,424 --> 00:02:48,704
How much of

75
00:02:48,960 --> 00:02:50,752
Software is linear and how much

76
00:02:51,264 --> 00:02:51,776
Is parlor

77
00:02:52,032 --> 00:02:53,824
Because the relation is always

78
00:02:54,080 --> 00:02:54,592
Linear

79
00:02:55,104 --> 00:02:57,920
The speed up of course will be slower okay if you have a

80
00:02:58,176 --> 00:02:58,944
Spiral

81
00:02:59,200 --> 00:02:59,968
Algorithm

82
00:03:00,224 --> 00:03:02,016
Your speed up will increase slower

83
00:03:02,272 --> 00:03:02,784
However

84
00:03:03,040 --> 00:03:03,552
It

85
00:03:03,808 --> 00:03:07,136
Linear as long as you keep on increasing your problem

86
00:03:08,160 --> 00:03:09,696
It's also important to realize

87
00:03:09,952 --> 00:03:12,512
What's concurrent programming or parallel programming

88
00:03:13,792 --> 00:03:15,328
Just about speeding things

89
00:03:16,352 --> 00:03:16,864
Sometimes

90
00:03:17,120 --> 00:03:19,936
It's convenient to program in a multithreaded

91
00:03:21,728 --> 00:03:23,776
In fact in the next lecture in the next

92
00:03:24,288 --> 00:03:25,568
And the one after we will look

93
00:03:25,824 --> 00:03:27,616
Cat implementing a simulation

94
00:03:28,128 --> 00:03:29,408
Assimilation that mimics

95
00:03:29,664 --> 00:03:31,456
Bird Behavior right the flights

96
00:03:31,712 --> 00:03:32,992
The birds in flight

97
00:03:33,504 --> 00:03:36,320
And we will see that it's much easier to implement

98
00:03:36,832 --> 00:03:39,904
Buy modeling each bird as if it was a separate thread

99
00:03:40,160 --> 00:03:40,928
Play the ASAP red process

100
00:03:41,952 --> 00:03:48,096
The other thing to consider is that part of the programming or Some people prefer to call it concurrent programming

101
00:03:48,352 --> 00:03:50,912
That's not just make sense when you have more than one

102
00:03:51,168 --> 00:03:51,680
Process

103
00:03:51,936 --> 00:03:54,752
Typically when you have more than one processor us sign

104
00:03:55,008 --> 00:03:55,520
In a task

105
00:03:55,776 --> 00:03:56,544
We each processor

106
00:03:56,800 --> 00:03:57,824
And when that completes

107
00:03:58,080 --> 00:03:58,848
You swap it out

108
00:03:59,104 --> 00:04:01,920
And you replace it with another one and you keep on

109
00:04:02,176 --> 00:04:08,320
Doing this over and over again does it make sense to use part of the programming when you have only one core when you have

110
00:04:08,576 --> 00:04:09,344
Only one processor

111
00:04:09,600 --> 00:04:12,928
If you only have one person what you can do is that while

112
00:04:13,184 --> 00:04:16,000
Add process is being executed and you interrupted

113
00:04:16,256 --> 00:04:17,024
And you swap

114
00:04:17,280 --> 00:04:17,791
With

115
00:04:18,559 --> 00:04:20,863
And if you do this fast enough and you do it

116
00:04:21,119 --> 00:04:25,215
Continuously you would give the impression that you have multiple processes running

117
00:04:26,239 --> 00:04:31,615
This is sometimes useful when you want to have your program more responsive right when you want them to respond to

118
00:04:31,871 --> 00:04:32,383
External

119
00:04:32,639 --> 00:04:33,663
When's when they happen in

120
00:04:33,919 --> 00:04:35,455
Maybe you know a few minutes later

121
00:04:35,967 --> 00:04:39,551
This swapping in and out of these processors or thread

122
00:04:39,807 --> 00:04:40,831
That's not just happen

123
00:04:41,087 --> 00:04:42,879
To give the impression of conc

124
00:04:43,647 --> 00:04:45,183
Sometimes a process

125
00:04:45,439 --> 00:04:47,487
Does needs to perform some I

126
00:04:48,511 --> 00:04:49,791
And what happens is

127
00:04:50,047 --> 00:04:52,095
Instead of just having the procedure

128
00:04:52,607 --> 00:04:53,631
Waiting for

129
00:04:53,887 --> 00:04:57,215
That data to arrive from hard disk for example which was slow

130
00:04:57,727 --> 00:04:58,751
Things down quite a lot

131
00:04:59,263 --> 00:05:03,103
What do you do with the stop the execution of that program let's wait for

132
00:05:03,359 --> 00:05:08,735
What's IO operation to complete and in the meantime you put another process that it's ready to execute

133
00:05:08,991 --> 00:05:12,063
Can you put it on the CPU and you continue executing that

134
00:05:12,319 --> 00:05:14,367
Eventually when the io completes

135
00:05:14,623 --> 00:05:15,647
What's the process will go back

136
00:05:15,903 --> 00:05:17,183
Back to our ridicu

137
00:05:17,695 --> 00:05:18,207
And then

138
00:05:18,463 --> 00:05:20,511
Eventually it will get its turn to

139
00:05:20,767 --> 00:05:21,535
Turn on the CPU

140
00:05:22,815 --> 00:05:23,839
Now that we know

141
00:05:24,095 --> 00:05:25,631
Theory about parallel

142
00:05:26,399 --> 00:05:27,679
And we have seen

143
00:05:28,703 --> 00:05:29,727
We want to de

144
00:05:29,983 --> 00:05:30,495
Off

145
00:05:30,751 --> 00:05:31,775
This multi

146
00:05:32,031 --> 00:05:32,543
Sing or

147
00:05:34,335 --> 00:05:36,383
What we will do in the next lesson

148
00:05:36,639 --> 00:05:37,919
Is to look

149
00:05:38,175 --> 00:05:39,711
Add some of the more practical to

150
00:05:39,967 --> 00:05:42,271
That will allow us to program our

151
00:05:42,527 --> 00:05:43,039
Software

152
00:05:43,807 --> 00:05:44,575
So join me

153
00:05:44,831 --> 00:05:46,879
In the next lesson to learn

154
00:05:47,135 --> 00:05:48,671
More about multi
